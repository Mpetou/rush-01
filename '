#include<stdio.h>
#include <unistd.h>

void ft_putchar(char c)
{write(1, &c, 1);}
void rl()
{ft_putchar('\n');}
void ps(char *str)
{
	int i = 0;
	while (str[i])
	{
		ft_putchar(str[i]);
		i++;
	}
}
void psrl(char *str)
{ps(str);rl();}
void pn(int n)
{
	if (n >= 10)
	{
		pn(n / 10);
	}
	ft_putchar(n % 10 + '0');
}
void pnrl(int n)
{pn(n);rl();}
void pt(int *tab, int s)
{
	int i = 0;
	while (i < s)
	{
		pn(tab[i]);
		i++;
	}
}

void set_tab (int **tab)
{
	int x = 0;
	int y = 0;
	while (y < 4)
	{
		while (x < 4)
		{
//			tab[x][y] = x + y *4;
			tab[x][y] = 0;
			x++;
		}
		y++;
		x = 0;
	}
}

typedef struct puzzle puzzle;
struct puzzle
{
	int **grid;
	int *pv_h;
	int *pv_v;
};

typedef struct v2 v2;
struct v2
{
	int x;
	int y;
};
void p_puz(puzzle puz)
{
	int x = 0;
	int y = 0;
	ps("   ");
	while (x < 4)
	{
		pn(puz.pv_v[x]);
		if (x != 3)
			ps("_");
		x++;
	}
	x = 0;
	rl();
	rl();
	while (y < 4)
	{
		//afficher pv left
		pn(puz.pv_h[y]);ps("  ");
		while (x < 4)
		{
			pn(puz.grid[x][y]);
			if (x != 3)
				ps(" ");
			x++;
		}
		ps("  ");pn(puz.pv_h[y + 4]);
		rl();
		y++;
		x = 0;
	}
	x = 0;
	rl();	
	ps("  ");
	while (x < 4)
	{
		pn(puz.pv_v[x + 4]);
		if (x != 3)
			ps("_");
		x++;
	}
	rl();
}

//can put box
int can_p_b(v2 coo, int box, puzzle)
{


//put box
int p_b(v2 coo, puzzle puz)
{
	pn("trying to put box on case");pn(coo.x);pnrl(coo.y);
	rl();
	p_puz(puz);
//setup ossibilities-----------------
	//ossible boxes
	int pos[5];
	i = 0;
	while (i++ < 4)
		pos[i] = 1;
	i = -1;
	while (i++ < 4)
	{
		pos[puz.grid[coo.x][i]] = 0;
		pos[puz.grid[i][coo.y]] = 0;
	}
	
//try put box-------------------------
	i = 0;
	while (i++ < 4)
	{
		if (pos[i] == 1)
		{
			int r_can_p_b = can_p_b(coo, pos[i], puz);
			ps("can_p_b returned ");pnrl(r_can_p_b);
		}
	}
	return (0);
}

int main (int argc, char **argv)
{
//setup puz-------------------------------
	puzzle puz;
	//setup grid
	int row0[4];
	int row1[4];
	int row2[4];
	int row3[4];
	int *grid[4];
	grid [0] = row0;
	grid [1] = row1;
	grid [2] = row2;
	grid [3] = row3;
	set_tab(grid);
	puz.grid = grid;

	//setup pvs
	(void)argc;
		int i;
	int pv_v [8];
	int pv_h [8];
	i = 0;
	while (i < 8)
	{
		pv_v [i] = argv[1] [i * 2] - '0';
		i++;
	}
	while (i < 16)
	{
		pv_h [i - 8]= argv[1] [i * 2] - '0';
		i++;
	}
	puz.pv_h = pv_h;
	puz.pv_v = pv_v;

	//show puz
//	p_puz(puz);
//start solving puz--------------------------------

}
